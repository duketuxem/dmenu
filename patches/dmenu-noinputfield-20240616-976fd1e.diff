From 976fd1e182de996739e372865d7aa4a480490f58 Mon Sep 17 00:00:00 2001
From: Duke Tuxem <33418846+DukeTuxem@users.noreply.github.com>
Date: Sun, 16 Jun 2024 15:50:34 +0200
Subject: [PATCH] A dmenu patch to disable the keyboard input field.

The new -x option prevents character insertion or paste mode and removes
the cursor. This is useful for prompting a choice from items passed
through stdin, ensuring the selection remains visible and unaltered.

A simple example could be a confirmation prompt:
$> printf "No\nYes" | dmenu -x -p "Do you want to exit ?"
---
 dmenu.1 |  4 ++++
 dmenu.c | 32 ++++++++++++++++++++------------
 2 files changed, 24 insertions(+), 12 deletions(-)

diff --git a/dmenu.1 b/dmenu.1
index 323f93c..aac4afa 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -80,6 +80,10 @@ prints version information to stdout, then exits.
 .TP
 .BI \-w " windowid"
 embed into windowid.
+.TP
+.BI \-x
+deactivate the keyboard input field. This is useful to create an interaction
+that does not require to type but to only select.
 .SH USAGE
 dmenu is completely controlled by the keyboard.  Items are selected using the
 arrow keys, page up, page down, home, and end.
diff --git a/dmenu.c b/dmenu.c
index 40f93e0..7641adb 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -43,6 +43,7 @@ static struct item *items = NULL;
 static struct item *matches, *matchend;
 static struct item *prev, *curr, *next, *sel;
 static int mon = -1, screen;
+static int inputfield = 1;
 
 static Atom clip, utf8;
 static Display *dpy;
@@ -157,14 +158,16 @@ drawmenu(void)
 		x = drw_text(drw, x, 0, promptw, bh, lrpad / 2, prompt, 0);
 	}
 	/* draw input field */
-	w = (lines > 0 || !matches) ? mw - x : inputw;
-	drw_setscheme(drw, scheme[SchemeNorm]);
-	drw_text(drw, x, 0, w, bh, lrpad / 2, text, 0);
-
-	curpos = TEXTW(text) - TEXTW(&text[cursor]);
-	if ((curpos += lrpad / 2 - 1) < w) {
+	if (inputfield) {
+		w = (lines > 0 || !matches) ? mw - x : inputw;
 		drw_setscheme(drw, scheme[SchemeNorm]);
-		drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, text, 0);
+
+		curpos = TEXTW(text) - TEXTW(&text[cursor]);
+		if ((curpos += lrpad / 2 - 1) < w) {
+			drw_setscheme(drw, scheme[SchemeNorm]);
+			drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
+		}
 	}
 
 	if (lines > 0) {
@@ -372,8 +375,9 @@ keypress(XKeyEvent *ev)
 			break;
 		case XK_y: /* paste selection */
 		case XK_Y:
-			XConvertSelection(dpy, (ev->state & ShiftMask) ? clip : XA_PRIMARY,
-			                  utf8, utf8, win, CurrentTime);
+			if (inputfield)
+				XConvertSelection(dpy, (ev->state & ShiftMask) ? clip : XA_PRIMARY,
+			                          utf8, utf8, win, CurrentTime);
 			return;
 		case XK_Left:
 		case XK_KP_Left:
@@ -414,7 +418,7 @@ keypress(XKeyEvent *ev)
 	switch(ksym) {
 	default:
 insert:
-		if (!iscntrl((unsigned char)*buf))
+		if (!iscntrl((unsigned char)*buf) && inputfield)
 			insert(buf, len);
 		break;
 	case XK_Delete:
@@ -514,7 +518,7 @@ insert:
 		}
 		break;
 	case XK_Tab:
-		if (!sel)
+		if (!sel || !inputfield)
 			return;
 		cursor = strnlen(sel->text, sizeof text - 1);
 		memcpy(text, sel->text, cursor);
@@ -677,7 +681,9 @@ setup(void)
 		mw = wa.width;
 	}
 	promptw = (prompt && *prompt) ? TEXTW(prompt) - lrpad / 4 : 0;
-	inputw = mw / 3; /* input width: ~33% of monitor width */
+	/* reduced input field width (default way too large : mw / 3)
+	   otherwise, use no space for the -x option */
+	inputw = inputfield ? mw / 8 : 0;
 	match();
 
 	/* create menu window */
@@ -734,6 +740,8 @@ main(int argc, char *argv[])
 			topbar = 0;
 		else if (!strcmp(argv[i], "-f"))   /* grabs keyboard before reading stdin */
 			fast = 1;
+		else if (!strcmp(argv[i], "-x"))   /* deactivates input field */
+			inputfield = 0;
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
-- 
2.44.0

